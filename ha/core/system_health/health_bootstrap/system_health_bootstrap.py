#!/usr/bin/env python3

# Copyright (c) 2021 Seagate Technology LLC and/or its Affiliates
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.

import time

from cortx.utils.conf_store import Conf
from cortx.utils.log import Log

from ha.core.config.config_manager import ConfigManager
from ha.core.error import HaConfigException
from ha.core.system_health.system_health_exception import InvalidHealthDataException
from ha.core.system_health.const import NODE_HEALTH_RETRY_COUNT
from ha.core.system_health.const import NODE_HEALTH_RETRY_INTERVAL
from ha.core.system_health.health_bootstrap.json_kv_convertor import KVGenerator
from cortx.utils.discovery import Discovery



class BootstrapHealth:

    def __init__(self):

        self._node_name = None
        self._kvGen = KVGenerator()

        # Log file.
        # [TBD] confirm if different log file needed or not
        ConfigManager.init("ha_health_bootstrap")

    def bootstrap_node_health(self, node_name, conf_index, conf_store):

        self._node_name = node_name
        Log.info(f"Bootstrapping node health for {node_name}")

        request_id = self._generate_node_health()
        kvfile = self._get_node_health(request_id)
        self._update_node_health(kvfile, conf_index, conf_store)
        self._cleanup_health_data()

    def _generate_node_health(self):

        Log.info(f"Generating Node health for {self._node_name}")
        request_id = Discovery.generate_node_health()

        if request_id is None:
            Log.error(f"Node health generation failed; Invalid request Id received for node {self._node_name} from Discovery module")
            raise InvalidHealthDataException(f"Node health generation failed; Invalid request Id received for node {self._node_name} from Discovery module")

        for i in range(0, int(NODE_HEALTH_RETRY_COUNT)):
            status = Discovery.get_gen_node_health_status(request_id)
            # [TBD] this part to be tested /verified after integration with Dicovery module
            if status is "Success":
                Log.info(f"Node health generation successful for {self._node_name}")
                return request_id
            time.sleep(NODE_HEALTH_RETRY_INTERVAL)

        if status is not "Success":
            Log.error(f"Node health generation failed; Health not generated by Discovery module for {self._node_name} ")
            raise InvalidHealthDataException(f"Node health generation failed; Health not generated by Discovery module for {self._node_name} ")


    def _get_node_health(self, request_id):

        url = Discovery.get_node_health(request_id)

        # Validate url for json format
        # Expected format  "json://<file_path>/<file_name>"
        if "json://" not in url:
            Log.error(f"Node health generation failed; Invalid URL {url} received for {self._node_name}")
            raise InvalidHealthDataException(f"Node health generation failed; Invalid URL {url} received for {self._node_name}")

        # [TBD] url verification, parsing to be verified after integration with Dicovery module
        url = url.replace('json://', '')

        # Get the necesary data in KV format
        kvfile = self._kvGen.parse_json(url)
        return kvfile

    def _update_node_health(self, kvfile, conf_index, conf_store):

        Log.info(f"Updating node health for {self._node_name}")
        self._kvGen.generate_health_event(kvfile, conf_index, conf_store)

    def _cleanup_health_data(self):

        # Delete the json file created by Discovery module
        # [TBD] this part to be implemented during integration with Dicovery module
        pass