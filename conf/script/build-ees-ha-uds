#!/bin/bash
set -eu -o pipefail
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '
# set -x

PROG=${0##*/}

usage() {
    cat <<EOF
Usage: $PROG [OPTS]

Configures UDS HA by adding resources to Pacemaker.

Caveats:

* The script expects that 'csm-agent' resource is added to Pacemaker.
  Check with 'pcs status'.

Optional parameters:
  --cib-file            Pacemaker configuration file.
  --update              Preserve Consul and Motr state, reconfigure Pacemaker only.

EOF
}

TEMP=$(getopt --options h,i: \
              --longoptions help,cib-file:,update \
              --name "$PROG" -- "$@" || true)

(($? == 0)) || { usage >&2; exit 1; }

eval set -- "$TEMP"

update=false
cib_file=/var/lib/hare/cib_cortx_cluster.xml
ha_lib=/var/lib/hare/
LOG_DIR="/var/log/seagate/cortx/ha"
TMP_LOG="/tmp/ha.log"
LOG="${LOG_DIR}/${0##*/}.log"

while true; do
    case "${1:-default}" in
        -h|--help)     usage; exit ;;
        --cib-file)    cib_file=$2; shift 2 ;;
        --update)      update=true; shift 2 ;;
        --)            shift; break ;;
        *)             break ;;
    esac
done

resources=(
    uds
)

dependency_resource=(
    csm-agent
)

handle_error() {
    MSG=$(cat ${TMP_LOG})
    echo "$(date '+%Y-%m-%d %H:%M:%S'): ${MSG}" >> ${LOG}
    echo ${MSG} | grep -q "already" || {
        echo "ERROR: ${MSG}"
        exit 1
    }
}

verify_resources() {
    RESOURCE_LIST=$(pcs resource)
    for resource in ${resources[@]}; do
        echo ${RESOURCE_LIST} | grep -q ${resource} || {
            echo "Error: ${resource} resource is missing. Check log at ${LOG}"
            exit 1
        }
    done
    echo "UDS resource configured successfully."
    exit 0
}

verify_dependency_resources() {
    RESOURCE_LIST=$(pcs resource)
    for resource in ${dependency_resource[@]}; do
        echo ${RESOURCE_LIST} | grep -q ${resource} || {
            echo "Error: ${resource} resource is missing. Log at ${LOG}"
            exit 1
        }
    done
    echo "Dependency resource check passed..."
}

precheck() {
    # Abort (set -e) if `csm-agent` resource does not exist.
    sudo pcs resource show csm-agent >/dev/null
}

uds_rsc_add() {
    echo 'Adding UDS resource and constraints...'
    sudo pcs -f $cib_file resource create uds systemd:uds op monitor interval=30s 2> "${TMP_LOG}" || handle_error
    sudo pcs -f $cib_file constraint colocation add uds with csm-agent score=INFINITY 2> "${TMP_LOG}" || handle_error

    # According to EOS-9258, there is a bug which requires UDS to be started after csm_agent
    sudo pcs -f $cib_file constraint order csm-agent then uds 2> "${TMP_LOG}" || handle_error
}

cib_init() {
    mkdir -p ${ha_lib}
    sudo pcs cluster cib $cib_file
}

cib_commit() {
    sudo pcs cluster cib-push $cib_file --config
}

# HA operations table.
ha_ops=(
    precheck
    verify_dependency_resources
    uds_rsc_add
    verify_resources
)

# Maps ha operation from the ha_ops table to its respective type.
# HA operations are classified and described as follows,
# bootstrap:   executes during clean installation of the software only
# update:      executes during clean install and software update
declare -A ha_ops_type=(
    [precheck]='bootstrap'
    [verify_dependency_resources]='bootstrap'
    [uds_rsc_add]='update'
    [verify_resources]='update'
)

for op in ${ha_ops[@]}; do
    if ! $update; then
        cib_init
        $op
        cib_commit
    elif [[ ${ha_ops_type[$op]} == 'update' ]]; then
        # We are using existing CIB as a base and re-applying the pcs
        # instructions, thus some instructions would already exist in the
        # CIB, we ignore them.
        $op || true
    fi
done