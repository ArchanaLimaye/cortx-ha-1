#!/bin/bash
set -eu -o pipefail
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '
# set -x

PROG=${0##*/}

usage() {
    cat <<EOF
Usage: $PROG [OPTS] [<params.yaml>]

Configures SSPL HA by preparing and adding resources into the Pacemaker.

Caveats:

* The script expects Pacemaker to be started and have consul and rabbitmq
  configured. Check with 'pcs status'.

* Passwordless SSH access between the nodes is required.

* The script should be executed from the "left" node.

* Consul should be started on all cluster nodes.

* Rabbitmq should be started on all cluster nodes.


Mandatory parameters:
  --left-node     <n1>  Left node hostname (default: pod-c1)
  --right-node    <n2>  Right node hostname (default: pod-c2)

Optional parameters:
  --cib-file            Pacemaker configuration file.
  --update              Preserve Consul and Motr state, reconfigure Pacemaker only.

Note: parameters can be specified either directly via command line options
or via YAML file, e.g.:
  left-node: <lnode>
  right-node: <rnode>
EOF
}

TEMP=$(getopt --options h: \
              --longoptions help,left-node:,right-node: \
              --longoptions cib-file:,update \
              --name "$PROG" -- "$@" || true)

(($? == 0)) || { usage >&2; exit 1; }

eval set -- "$TEMP"

lnode=pod-c1
rnode=pod-c2
update=false
cib_file=/var/lib/hare/cib_cortx_cluster.xml
ha_lib=/var/lib/hare/
LOG_DIR="/var/log/seagate/cortx/ha"
TMP_LOG="/tmp/ha.log"
LOG="${LOG_DIR}/${0##*/}.log"

mkdir -p "${LOG_DIR}"

while true; do
    case "$1" in
        -h|--help)           usage; exit ;;
        --left-node)         lnode=$2; shift 2 ;;
        --right-node)        rnode=$2; shift 2 ;;
        --cib-file)          cib_file=$2; shift 2 ;;
        --update)            update=true; shift 2 ;;
        --)                  shift; break ;;
        *)                   break ;;
    esac
done

argsfile=${1:-}
hare_dir=/var/lib/hare

if [[ -f $argsfile ]]; then
    while IFS=': ' read name value; do
       case $name in
           left-node)    lnode=$value   ;;
           right-node)   rnode=$value   ;;
       esac
    done < $argsfile
fi

[[ $lnode ]] && [[ $rnode ]] || {
    usage >&2
    exit 1
}

resources=(
    sspl-master
)

dependency_resource=(
    consul-c1
    consul-c2
)

handle_error() {
    MSG=$(cat ${TMP_LOG})
    echo "$(date '+%Y-%m-%d %H:%M:%S'): ${MSG}" >> ${LOG}
    echo ${MSG} | grep -q "already" || {
        echo "ERROR: ${MSG}"
        exit 1
    }
}

verify_resources() {
    RESOURCE_LIST=$(pcs resource)
    for resource in ${resources[@]}; do
        echo ${RESOURCE_LIST} | grep -q ${resource} || {
            echo "Error: ${resource} resource is missing. Check log at ${LOG}"
            exit 1
        }
    done
    echo "SSPL resource configured successfully."
    exit 0
}

verify_dependency_resources() {
    RESOURCE_LIST=$(pcs resource)
    for resource in ${dependency_resource[@]}; do
        echo ${RESOURCE_LIST} | grep -q ${resource} || {
            echo "Error: ${resource} resource is missing. Log at ${LOG}"
            exit 1
        }
    done
    echo "Dependency resource check passed..."
}

die() {
    echo "[$HOSTNAME] $PROG: $*" >&2
    exit 1
}

run_on_both() {
    local cmd=$*
    eval $cmd
    ssh $rnode $cmd
}

precheck() {
    systemctl is-active --quiet hare-consul-agent-c1 ||
        die 'No active Consul instance found'
    ssh $rnode "systemctl is-active --quiet hare-consul-agent-c2" ||
        die 'No active Consul instance found'

    systemctl is-active --quiet rabbitmq-server ||
        die 'No active rabbitmq instance found'
    ssh $rnode "systemctl is-active --quiet rabbitmq-server" ||
        die 'No active rabbitmq instance found'
}

systemd_disable() {
    echo 'Disable sspl systemd unit...'
    cmd='sudo systemctl stop sspl-ll && sudo systemctl disable sspl-ll'
    run_on_both $cmd
}

sspl_rsc_add() {
    echo 'Adding sspl resource and constraints...'

    sudo pcs -f $cib_file resource create sspl ocf:cortx:sspl \
        master meta migration-threshold=10 failure-timeout=10s is-managed=true 2> "${TMP_LOG}" || handle_error
    sudo pcs -f $cib_file constraint order consul-c1 then sspl-master kind=Optional 2> "${TMP_LOG}" || handle_error
    sudo pcs -f $cib_file constraint order consul-c2 then sspl-master kind=Optional 2> "${TMP_LOG}" || handle_error
    sudo pcs -f $cib_file constraint order consul-c1 then promote sspl-master \
         kind=Optional 2> "${TMP_LOG}" || handle_error
    sudo pcs -f $cib_file constraint order consul-c2 then promote sspl-master \
         kind=Optional 2> "${TMP_LOG}" || handle_error

# failure-timeout "is not guaranteed to be checked more frequently than"
# cluster-recheck-interval, see more at
# https://clusterlabs.org/pacemaker/doc/en-US/Pacemaker/1.1/html/Pacemaker_Explained/s-resource-options.html#_resource_meta_attributes
    pcs property set cluster-recheck-interval=10s
}

consul_config() {
    echo 'Copying Consul configuration files...'

    [ -f /opt/seagate/cortx/sspl/bin/consul_config.json ] || {
        sudo cp /opt/seagate/cortx/sspl/bin/consul_config.json \
            $hare_dir/consul-server-c1-conf/
    }

    cmd="
    [ -f /opt/seagate/cortx/sspl/bin/consul_config.json ] ||
        cp /opt/seagate/cortx/sspl/bin/consul_config.json \
            $hare_dir/consul-server-c2-conf/
    "
    ssh $rnode $cmd

    echo 'Reloading Consul...'
    /opt/seagate/cortx/hare/bin/consul reload
}

cib_init() {
    mkdir -p ${ha_lib}
    sudo pcs cluster cib $cib_file
}

cib_commit() {
    sudo pcs cluster cib-push $cib_file --config
}

# HA operations table.
ha_ops=(
    precheck
    systemd_disable
    verify_dependency_resources
    sspl_rsc_add
    consul_config
    verify_resources
)

# Maps ha operation from the ha_ops table to its respective type.
# HA operations are classified and described as follows,
# bootstrap:   executes during clean installation of the software only
# update:      executes during clean install and software update
declare -A ha_ops_type=(
    [precheck]='bootstrap'
    [systemd_disable]='bootstrap'
    [verify_dependency_resources]='bootstrap'
    [sspl_rsc_add]='update'
    [consul_config]='bootstrap'
    [verify_resources]='update'
)

for op in ${ha_ops[@]}; do
    if ! $update; then
        cib_init
        $op
        cib_commit
    elif [[ ${ha_ops_type[$op]} == 'update' ]]; then
        # We are using existing CIB as a base and re-applying the pcs
        # instructions, thus some instructions would already exist in the
        # CIB, we ignore them.
        $op || true
    fi
done